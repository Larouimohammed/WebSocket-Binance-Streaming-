// file: invoicer.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/Message.proto

package Message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Send_Sendmsg_FullMethodName = "/Send/Sendmsg"
)

// SendClient is the client API for Send service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendClient interface {
	Sendmsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (Send_SendmsgClient, error)
}

type sendClient struct {
	cc grpc.ClientConnInterface
}

func NewSendClient(cc grpc.ClientConnInterface) SendClient {
	return &sendClient{cc}
}

func (c *sendClient) Sendmsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (Send_SendmsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &Send_ServiceDesc.Streams[0], Send_Sendmsg_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sendSendmsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Send_SendmsgClient interface {
	Recv() (*Resp, error)
	grpc.ClientStream
}

type sendSendmsgClient struct {
	grpc.ClientStream
}

func (x *sendSendmsgClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SendServer is the server API for Send service.
// All implementations must embed UnimplementedSendServer
// for forward compatibility
type SendServer interface {
	Sendmsg(*Msg, Send_SendmsgServer) error
	mustEmbedUnimplementedSendServer()
}

// UnimplementedSendServer must be embedded to have forward compatible implementations.
type UnimplementedSendServer struct {
}

func (UnimplementedSendServer) Sendmsg(*Msg, Send_SendmsgServer) error {
	return status.Errorf(codes.Unimplemented, "method Sendmsg not implemented")
}
func (UnimplementedSendServer) mustEmbedUnimplementedSendServer() {}

// UnsafeSendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendServer will
// result in compilation errors.
type UnsafeSendServer interface {
	mustEmbedUnimplementedSendServer()
}

func RegisterSendServer(s grpc.ServiceRegistrar, srv SendServer) {
	s.RegisterService(&Send_ServiceDesc, srv)
}

func _Send_Sendmsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Msg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SendServer).Sendmsg(m, &sendSendmsgServer{stream})
}

type Send_SendmsgServer interface {
	Send(*Resp) error
	grpc.ServerStream
}

type sendSendmsgServer struct {
	grpc.ServerStream
}

func (x *sendSendmsgServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

// Send_ServiceDesc is the grpc.ServiceDesc for Send service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Send_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Send",
	HandlerType: (*SendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sendmsg",
			Handler:       _Send_Sendmsg_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/Message.proto",
}
